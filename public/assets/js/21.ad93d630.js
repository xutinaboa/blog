(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{520:function(o,e,i){"use strict";i.r(e);var s=i(20),n=Object(s.a)({},(function(){var o=this,e=o.$createElement,i=o._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[i("h2",{attrs:{id:"cookie-session"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#cookie-session"}},[o._v("#")]),o._v(" Cookie-Session")]),o._v(" "),i("p",[o._v("HTTP 是无状态的协议（对于事务处理没有记忆能力，每次客户端和服务端会话完成时，服务端不会保存任何会话信息）：每个请求都是完全独立的，服务端无法确认当前访问者的身份信息，无法分辨上一次的请求发送者和这一次的发送者是不是同一个人。所以服务器与浏览器为了进行会话跟踪就必须主动的去维护一个状态，这个状态用于告知服务端前后两个请求是否来自同一浏览器和同一个用户账号。")]),o._v(" "),i("p",[o._v("Cookie 的存在也不是为了解决HTTP协议无状态的问题，只是为了解决客户端与服务端会话状态的问题，它的具体设置为：客户端发送HTTP请求到服务器，服务器收到 HTTP 请求时，在响应头里面添加一个 Set-Cookie 字段，浏览收到响应后保存下Cookie，之后每次请求时都携带Cookie给服务器，告知服务器当前的会话状态。")]),o._v(" "),i("p",[o._v("Cookie作为一段一般不超过 4KB 的小型文本数据，它由名/值对和其它几个用于控制 Cookie 有效期、安全性、使用范围的可选属性组成。Expires 用于设置 Cookie 的过期时间，当 Expires 属性缺省时，表示是会话性 Cookie，当为会话性 Cookie 的时候，值保存在客户端内存中，并在用户关闭浏览器时失效。与会话性 Cookie 相对的是持久性 Cookie，持久性 Cookies 会保存在用户的硬盘中，直至过期或者清除 Cookie。这里值得注意的是，设定的日期和时间只与客户端相关，而不是服务端。这也常导致服务端时间和客户端时间出现误差，Max-Age属性是用于设置在Cookie失效之前经过的秒数，如果 max-Age 属性为正数时，浏览器会将其持久化，即写到对应的 Cookie 文件中。当 max-Age 属性为负数，则表示该 Cookie 只是一个会话性 Cookie。当 max-Age 为 0 时，则会立即删除这个 Cookie。相比Expires，Max-Age 优先级更高。针对Cookie的作用范围，Domain属性和Path属性标识共同定义了 Cookie 的作用域——即 Cookie 应该发送给哪些 URL。但Cookie 是不可跨域的，它只能在一、二级域名下共享使用，像淘宝首页设置的 Domain 就是 .taobao.com，这样无论是 a.taobao.com 还是 b.taobao.com 都可以使用 Cookie。在安全性上，Secure属性只应通过被HTTPS协议加密过的请求发送给服务端，使用HTTPS安全协议，可以保护Cookie在浏览器和服务器间的传输过程中不被窃取和篡改，HTTPOnly 属性可以防止客户端脚本通过 document.cookie 等方式访问 Cookie，有助于避免 XSS 攻击。SameSite 属性可以让 Cookie 在跨站请求时不会被发送，从而可以阻止跨站请求伪造攻击（CSRF）。")]),o._v(" "),i("p",[o._v("session是另一种记录服务器和客户端会话状态的机制，它是基于cookie实现的，session 存储在服务器端，sessionId会被存储到客户端的cookie 中。用户第一次请求服务器的时候，服务器根据用户提交的相关信息，创建对应的Session，请求返回时将此Session的唯一标识信息 SessionID 返回给浏览器，浏览器接收到服务器返回的SessionID信息后，会将此信息存入到Cookie中，同时Cookie记录此SessionID属于哪个域名，当用户第二次访问服务器的时候，请求会自动判断此域名下是否存在 Cookie信息，如果存在自动将 Cookie 信息也发送给服务端，服务端会从Cookie中获取SessionID，再根据SessionID查找对应的Session信息，如果没有找到说明用户没有登录或者登录失效，如果找到 Session 证明用户已经登录可执行后面操作。")]),o._v(" "),i("p",[o._v("sessionId代替了Cookie容易被篡改的明文信息，但session对服务端造成负担，过多的内存，集群部署时的共享，基于cookie的跨域处理等等。还有一个更明显的是，这一切浏览器参与的比重过大，如自动发Cookie，和存储管理，这在移动端是不友好的，一个服务器需要对多端支持。")]),o._v(" "),i("h2",{attrs:{id:"token"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#token"}},[o._v("#")]),o._v(" Token")]),o._v(" "),i("p",[o._v("Token鄙弃了基于浏览器的Cookie，而是嵌入到HTTP首部中，它一般采用JWT的方式进行加密，即将 Token 和 Payload 加密后存储于客户端，服务端只需要使用密钥解密进行校验（校验也是 JWT 自己实现的）即可，不需要查询或者减少查询数据库，因为 JWT 自包含了用户信息和加密的数据。用户登录之后，服务端返回一个token在响应数据中，客户端将Token保存在LocalStorage中之后的每次请求都需要在HTTP首部中携带Token才具有权限访问服务器。基于 token 的用户认证是一种服务端无状态的认证方式，服务端不用存放 token 数据。用解析Token的计算时间换取 session 的存储空间，从而减轻服务器的压力，减少频繁的查询数据库。Token完全由应用管理，所以它可以避开同源策略。")]),o._v(" "),i("p",[o._v("Token在时效性上需要一定的拓展，需要服务端有效的刷新Token机制，如在用户两个小时没有用Token进行有效的请求时，服务端可认为其会话的状态过期。或者补充新的Token，客户端拦截响应收到新的token来代替旧的token保证持久性。也可以采用双Token的机制，这种方式叫Refresh Token，服务端给Token设置固定的时限，Refresh Token的时效性大于Token，当Token过期的时候返回一个错误被拦截，接着客户端采用Refresh Token去请求服务端，服务端识别是Refresh Token就重新返回新的Token和新的Refresh Token。否则Refresh Token过期，就需要重新登录。")]),o._v(" "),i("h2",{attrs:{id:"会话安全-跨站请求伪造csrf"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#会话安全-跨站请求伪造csrf"}},[o._v("#")]),o._v(" 会话安全：跨站请求伪造CSRF")]),o._v(" "),i("p",[o._v("跨站请求伪造CSRF简单的说，就是利用浏览器对用户的信任，比如，用户已经登录了ww.aaa.com，自然aaa这个网站就会将用户的登录状态session存在cookie中；然后，aaa.com这个网页有一个对作品点赞的功能，点赞提交地址为"),i("code",[o._v("aaa.com/api.like?id=777")]),o._v("；这时，另外一个叫www.bbb.com的网站，放了这样一个元素"),i("code",[o._v('<img src="aaa.com/api.like?id=888">')]),o._v("，这样的话，一旦用户进入这个bbb.com页面，就会请求aaa.com这个网站的点赞接口，而且点赞的用户对象是888，最后因为用户的登录信息尚未过期，那就等于给id为888这个作品点赞了，然而，用户并不知情。")]),o._v(" "),i("p",[o._v("CSRF利用http请求会自动携带Cookie和携带的cookie还是http请求所在域名的cookie等Cookie相关特性进行欺骗性会话保持。")]),o._v(" "),i("p",[o._v("可以采用Token来代替Cookie避免CSRF，另外SameSite属性也可以进行避免Cookie跨域请求会被发送，此外，服务器还可以检查HTTP请求中的头部信息中的Referer字段，通过域名来判别请求的真伪。")]),o._v(" "),i("p",[i("em",[o._v("Cookie来源于"),i("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/157#",target:"_blank",rel:"noopener noreferrer"}},[o._v("浏览器系列之 Cookie 和 SameSite 属性"),i("OutboundLink")],1)])]),o._v(" "),i("p",[i("em",[o._v("会话安全来源于"),i("a",{attrs:{href:"https://juejin.im/post/6844904102544031757",target:"_blank",rel:"noopener noreferrer"}},[o._v("面试：彻底理解Cookie以及Cookie安全"),i("OutboundLink")],1)])]),o._v(" "),i("p",[i("em",[o._v("Token来源于"),i("a",{attrs:{href:"https://juejin.im/post/6844904034181070861",target:"_blank",rel:"noopener noreferrer"}},[o._v("傻傻分不清之 Cookie、Session、Token、JWT"),i("OutboundLink")],1)])]),o._v(" "),i("p",[o._v("2018年10月29日")])])}),[],!1,null,null,null);e.default=n.exports}}]);